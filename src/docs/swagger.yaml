openapi: 3.0.0
info:
  title: AI Agent Marketplace API
  version: 1.0.0
  description: API documentation for the AI agent marketplace
  contact:
    name: API Support
    email: support@agenx.com

servers:
  - url: http://localhost:9000
    description: Development server
  - url: https://api.agenx.com
    description: Production server

tags:
  - name: Auth
    description: Authentication and user management endpoints
  - name: Agents
    description: Endpoints for managing AI agents
  - name: Reviews
    description: Endpoints for managing agent reviews
  - name: Companies
    description: Endpoints for managing companies

paths:
  /health:
    get:
      summary: Health check
      description: Check if the API is running
      responses:
        '200':
          description: API is operational
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    format: date-time

  #
  # Auth Endpoints
  #
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: Creates a new user account with the provided email, password, and name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Registration successful. Please check your email to confirm your account.
        '400':
          description: Invalid input or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Auth
      summary: Log in a user
      description: Authenticates a user with email and password credentials.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    type: object
                  session:
                    type: object
                    properties:
                      access_token:
                        type: string
                      refresh_token:
                        type: string
                      expires_at:
                        type: string
                        format: date-time
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Log out current user
      description: Invalidates the user's current session.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Logged out successfully
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Refresh access token
      description: Gets a new access token using a valid refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: New tokens issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  session:
                    type: object
                    properties:
                      access_token:
                        type: string
                      refresh_token:
                        type: string
                      expires_at:
                        type: string
                        format: date-time
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      tags:
        - Auth
      summary: Get current user's profile
      description: Returns the profile information for the currently authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  #
  # Agents Endpoints
  #
  /agents:
    get:
      tags:
        - Agents
      summary: Get all public agents
      description: Retrieve a paginated list of all public agents.
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: A list of agents
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  agents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Agent'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      pages:
                        type: integer
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Agents
      summary: Create a new agent
      description: Create a new agent with the provided details.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAgentRequest'
      responses:
        '201':
          description: Agent created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  agent:
                    $ref: '#/components/schemas/Agent'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /agents/featured:
    get:
      tags:
        - Agents
      summary: Get featured agents
      description: Retrieve a list of high-quality agents with good reviews.
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Number of items to return
      responses:
        '200':
          description: A list of featured agents
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  agents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Agent'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /agents/trending:
    get:
      tags:
        - Agents
      summary: Get trending agents
      description: Retrieve a list of agents that are currently trending based on views, likes, and recent reviews.
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Number of items to return
      responses:
        '200':
          description: A list of trending agents
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  agents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Agent'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /agents/search:
    get:
      tags:
        - Agents
      summary: Search agents
      description: Search for agents based on query parameters.
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
          description: Search query
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: A list of agents matching the search criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  agents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Agent'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      pages:
                        type: integer
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /agents/{id}:
    get:
      tags:
        - Agents
      summary: Get agent by ID
      description: Retrieve details of an agent by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the agent
      responses:
        '200':
          description: Agent details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  agent:
                    $ref: '#/components/schemas/Agent'
        '404':
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Agents
      summary: Update an agent
      description: Update the details of an existing agent.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the agent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAgentRequest'
      responses:
        '200':
          description: Agent updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  agent:
                    $ref: '#/components/schemas/Agent'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Agents
      summary: Delete an agent
      description: Delete an agent by its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the agent
      responses:
        '200':
          description: Agent deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Agent deleted successfully
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /agents/{id}/like:
    post:
      tags:
        - Agents
      summary: Like an agent
      description: Like or unlike an agent by its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the agent
      responses:
        '200':
          description: Agent like status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  liked:
                    type: boolean
                    description: True if the agent was liked, false if unliked
                  likesCount:
                    type: integer
                    description: The updated likes count
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /agents/{id}/view:
    post:
      tags:
        - Agents
      summary: View an agent
      description: Increment the view count for an agent by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the agent
      responses:
        '200':
          description: Agent view count incremented successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  viewsCount:
                    type: integer
                    description: The updated views count
        '404':
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  #
  # Reviews Endpoints
  #
  /agents/{agentId}/reviews:
    get:
      tags:
        - Reviews
      summary: Get reviews for a specific agent
      description: Retrieve a paginated list of reviews for a specific agent with optional filtering and sorting.
      parameters:
        - name: agentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the agent
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - name: sort
          in: query
          schema:
            type: string
            enum: [newest, oldest, highest, lowest]
            default: newest
          description: Sort order for reviews
        - name: rating
          in: query
          schema:
            type: integer
            enum: [1, 2, 3, 4, 5]
          description: Filter reviews by rating
      responses:
        '200':
          description: List of reviews
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReviewResponse'
        '404':
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Reviews
      summary: Submit a review for a specific agent
      description: Create a new review for an agent. Users can only submit one review per agent.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReviewRequest'
      parameters:
        - name: agentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the agent
      responses:
        '201':
          description: Review submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  review:
                    $ref: '#/components/schemas/ReviewResponse'
        '400':
          description: Invalid input or duplicate review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /agents/{agentId}/reviews/summary:
    get:
      tags:
        - Reviews
      summary: Get review summary for a specific agent
      description: Retrieve a summary of reviews for a specific agent including average rating and distribution.
      parameters:
        - name: agentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the agent
      responses:
        '200':
          description: Review summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  summary:
                    $ref: '#/components/schemas/ReviewSummary'
        '404':
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reviews/{reviewId}:
    put:
      tags:
        - Reviews
      summary: Edit a review
      description: Edit an existing review. Reviews can only be edited within 48 hours of submission.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReviewRequest'
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the review
      responses:
        '200':
          description: Review updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  review:
                    $ref: '#/components/schemas/ReviewResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not owner or edit window expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Review not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Reviews
      summary: Delete a review
      description: Delete an existing review. Users can only delete their own reviews.
      security:
        - bearerAuth: []
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the review
      responses:
        '200':
          description: Review deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Review deleted successfully
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Review not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # User schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        avatar:
          type: string
          nullable: true
        isVerified:
          type: boolean
        isOfficial:
          type: boolean
        createdAt:
          type: string
          format: date-time

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
        name:
          type: string

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string

    # Agent schemas
    Agent:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        imageUrl:
          type: string
          nullable: true
        isPro:
          type: boolean
        likes:
          type: integer
        views:
          type: integer
        rating:
          type: number
          format: float
        usageCount:
          type: integer
        capabilities:
          type: array
          items:
            type: string
        company:
          type: object
          nullable: true
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
            logoUrl:
              type: string
              nullable: true
            isVerified:
              type: boolean
            isEnterprise:
              type: boolean
        createdAt:
          type: string
          format: date-time
        isOwner:
          type: boolean

    CreateAgentRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        isPro:
          type: boolean
        capabilities:
          type: array
          items:
            type: string
        companyId:
          type: string
          format: uuid
        isPublic:
          type: boolean
          default: true

    UpdateAgentRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        isPro:
          type: boolean
        capabilities:
          type: array
          items:
            type: string
        companyId:
          type: string
          format: uuid
        isPublic:
          type: boolean

    # Review schemas
    CreateReviewRequest:
      type: object
      required:
        - rating
        - content
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Rating from 1 to 5 stars
        content:
          type: string
          minLength: 10
          maxLength: 2000
          description: Review content
        images:
          type: array
          items:
            type: string
            format: uri
            description: Image URL or Base64 encoded image
          maxItems: 5
          description: Optional images to include with the review

    UpdateReviewRequest:
      type: object
      required:
        - rating
        - content
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Rating from 1 to 5 stars
        content:
          type: string
          minLength: 10
          maxLength: 2000
          description: Review content
        images:
          type: array
          items:
            type: string
            format: uri
            description: Image URL or Base64 encoded image
          maxItems: 5
          description: Optional images to include with the review

    CreateReplyRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          minLength: 10
          maxLength: 1000
          description: Reply content

    VoteRequest:
      type: object
      required:
        - vote
      properties:
        vote:
          type: integer
          enum: [-1, 0, 1]
          description: 1 for upvote, -1 for downvote, 0 for removing vote

    ReviewResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        author:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
            avatar:
              type: string
              nullable: true
            isVerified:
              type: boolean
            isCurrentUser:
              type: boolean
            isOfficial:
              type: boolean
              nullable: true
        rating:
          type: integer
        date:
          type: string
          format: date-time
        formattedDate:
          type: string
        content:
          type: string
        replies:
          type: array
          items:
            $ref: '#/components/schemas/ReviewReplyResponse'
        replyCount:
          type: integer
        helpful:
          type: object
          properties:
            upvotes:
              type: integer
            downvotes:
              type: integer
            userVote:
              type: integer
        additionalImages:
          type: array
          items:
            $ref: '#/components/schemas/ReviewImageResponse'

    ReviewReplyResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        author:
          $ref: '#/components/schemas/ReviewAuthor'
        date:
          type: string
          format: date-time
        formattedDate:
          type: string
        content:
          type: string

    ReviewImageResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        url:
          type: string
        thumbnailUrl:
          type: string
        alt:
          type: string
          nullable: true

    ReviewAuthor:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        avatar:
          type: string
          nullable: true
        isVerified:
          type: boolean
        isCurrentUser:
          type: boolean
        isOfficial:
          type: boolean
          nullable: true

    ReviewSummary:
      type: object
      properties:
        averageRating:
          type: number
          format: float
        totalReviews:
          type: integer
        credibilityScore:
          type: number
          format: float
        credibilityBadge:
          type: string
          enum: [excellent, good, average, poor, not-rated]
        recentPositivePercentage:
          type: integer
        ratingDistribution:
          type: object
          properties:
            '1':
              type: integer
            '2':
              type: integer
            '3':
              type: integer
            '4':
              type: integer
            '5':
              type: integer

    # Discussion schemas
    Author:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        avatar:
          type: string
          nullable: true
        isVerified:
          type: boolean
        isOP:
          type: boolean
          nullable: true

    DiscussionResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        content:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        score:
          type: integer
        userVote:
          type: integer
          enum: [-1, 0, 1]
        timestamp:
          type: integer
        isPinned:
          type: boolean
        commentCount:
          type: integer
        agentId:
          type: string
          format: uuid

    CommentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        author:
          $ref: '#/components/schemas/Author'
        content:
          type: string
        timestamp:
          type: integer
        score:
          type: integer
        userVote:
          type: integer
          enum: [-1, 0, 1]
        replyCount:
          type: integer
        replies:
          type: array
          items:
            $ref: '#/components/schemas/CommentResponse'

    PaginationResponse:
      type: object
      properties:
        total:
          type: integer
        pages:
          type: integer
        current:
          type: integer
        limit:
          type: integer

    DiscussionDetailResponse:
      allOf:
        - $ref: '#/components/schemas/DiscussionResponse'
        - type: object
          properties:
            comments:
              type: array
              items:
                $ref: '#/components/schemas/CommentResponse'
            commentPagination:
              $ref: '#/components/schemas/PaginationResponse'

    CreateDiscussionRequest:
      type: object
      required:
        - agentId
        - title
        - content
      properties:
        agentId:
          type: string
          format: uuid
        title:
          type: string
          minLength: 5
          maxLength: 100
        content:
          type: string
          minLength: 10
          maxLength: 5000

    UpdateDiscussionRequest:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          minLength: 5
          maxLength: 100
        content:
          type: string
          minLength: 10
          maxLength: 5000

    VoteRequest:
      type: object
      required:
        - vote
      properties:
        vote:
          type: integer
          enum: [-1, 0, 1]
          description: -1 for downvote, 0 for no vote, 1 for upvote

    CreateCommentRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 2000
        parentCommentId:
          type: string
          format: uuid
          nullable: true

    UpdateCommentRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 2000

    # Response wrappers
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          default: false
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
